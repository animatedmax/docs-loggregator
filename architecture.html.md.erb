---
title: Loggregator Architecture
owner: Logging and Metrics
---

<strong><%= modified_date %></strong>

This topic describes the components of the Loggregator architecture.

## <a id='use-cases'></a> Components

Loggregator transports log messages via a chain of components from apps to either the firehose or a Doppler syslog drain. Operators can [scale](log-ops-guide.html#scaling) various components of the chain as necessary for load.

Loggregator components are shown in color:

<%= image_tag 'architecture/loggregator.png' %>

The following sections describe the function of each component:
### <a id='metron'></a>Metron

Metron agents are co-located with the source VMs that produce logs or metrics. The agents provide the entry point to the Loggregator chain by accepting messages from clients, grouping them into full buffers for efficient transport, and forwarding them to the Doppler servers. 

<p class="note"><strong>Note</strong>: Metron agents perform load balancing by randomly selecting a different Doppler for each buffer transmission.</p>

### <a id='doppler'></a>Doppler

Dopplers act as the primary transport mechanism. They gather logs from the Metron agents, store them in temporary buffers, and forward them to the Traffic Controller or to [third party syslog drains](../devguide/services/log-management).

Dopplers provide a small amount of per app buffering, typically 100 messages, to support `cf logs --recent`.

### <a id='traffic-controller'></a>Traffic Controller

The traffic controller handles client requests for logs by opening websockets to the Dopplers. 

The traffic controller provides API endpoints so that Nozzles and the cf CLI can access the following:

* **Firehose**: streams event data coming from a<%= vars.product_full=='Cloud Foundry' ? "" : "n"  %>  <%= vars.product_full %> deployment. The data stream includes logs, HTTP events and container metrics from all applications, and metrics from all <%= vars.product_full %> system components
* **Garden hose**: Logs and metrics for a single app.

The traffic controller keeps both of these connections open until the client releases the request.

---

MOVE TO TOPIC ABOUT ACCESSING - MAKE LINKS HERE

#### <a id='firehose'></a>Firehose

Because the data coming from the Firehose may contain sensitive information, such as customer information in the application logs, the Firehose is only accessible by users who have the right permissions.

The Traffic Controller serves the Firehose over websocket at the `/firehose` endpoint. The events coming out of the Firehose are formatted as protobuf messages conforming to the [dropsonde protocol](https://github.com/cloudfoundry/dropsonde-protocol).

The address of the traffic controller can be discovered by hitting the info endpoint on the API and getting the value of the doppler\_logging\_endpoint.

Example output for a BOSH Lite CF environment:
<pre class='terminal'>
 $ cf curl /v2/info | jq .doppler\_logging\_endpoint
 wss://doppler.192.0.2.34.xip.io:443
</pre>

---

### <a id='nozzles'></a> Nozzles

Nozzles are programs which consume data from the Loggregator Firehose. Nozzles can be configured to select, buffer, and transform data, and forward it to other applications and services. For example:

- The [Datadog nozzle](https://github.com/cloudfoundry-incubator/datadog-firehose-nozzle) publishes metrics coming from the Firehose to Datadog.
- The [Syslog nozzle](https://github.com/cloudfoundry-community/firehose-to-syslog) filters out log messages coming from the Firehose and sends it to a syslog server.

See our [Nozzle Tutorial](./nozzle-tutorial.html).

### <a id='sources'></a>Source

Sources are logging agents that run on the Cloud Foundry components.

